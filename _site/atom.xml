<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title></title>
 <link href="http://wanghongjun2014.github.io/atom.xml" rel="self"/>
 <link href="http://wanghongjun2014.github.io"/>
 <updated>2017-09-04T20:17:05-07:00</updated>
 <author>
   <name>王洪军</name>
   <email>wanghongjun2014#163.com</email>
 </author>

 
 <entry>
   <title>php的4种回调函数风格</title>
   <link href="http://wanghongjun2014.github.io/posts/php-four-callback.html"/>
   <updated>2017-08-13T00:00:00-07:00</updated>
   <id>/posts/php-four-callback</id>
   <content type="html">&lt;h3 id=&quot;匿名函数&quot;&gt;匿名函数&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$server-&amp;gt;on('Request', function ($req, $resp) {
    echo &quot;hello world&quot;;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;类静态方法&quot;&gt;类静态方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class A
{
    static function test($req, $resp)
    {
        echo &quot;hello world&quot;;
    }
}
$server-&amp;gt;on('Request', 'A::Test');
$server-&amp;gt;on('Request', array('A', 'Test'));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;函数&quot;&gt;函数&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;function my_onRequest($req, $resp)
{
    echo &quot;hello world&quot;;
}
$server-&amp;gt;on('Request', 'my_onRequest');
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;对象方法&quot;&gt;对象方法&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;class A
{
    function test($req, $resp)
    {
        echo &quot;hello world&quot;;
    }
}

$object = new A();
$server-&amp;gt;on('Request', array($object, 'test'));
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>php快速查看扩展的信息</title>
   <link href="http://wanghongjun2014.github.io/posts/php-ri.html"/>
   <updated>2017-08-11T00:00:00-07:00</updated>
   <id>/posts/php-ri</id>
   <content type="html">&lt;p&gt;比如我想快速查看php某个扩展的版本号, 可以用如下命令来快速查看&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php --ri swoole
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;php –ri 命令就是专门用来查看php扩展信息的, 后面直接加上扩展的name就好&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>dyld: Library not loaded</title>
   <link href="http://wanghongjun2014.github.io/posts/mac_brew_php_error.html"/>
   <updated>2017-08-10T00:00:00-07:00</updated>
   <id>/posts/mac_brew_php_error</id>
   <content type="html">&lt;p&gt;今天莫名其妙的出现了如下错误&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php -v
dyld: Library not loaded: /usr/local/opt/jpeg/lib/libjpeg.8.dylib
  Referenced from: /usr/local/bin/php
  Reason: image not found
[1]    24433 abort      php -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决办法是重新安装下libjpeg.8.dylib这个包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -c http://www.ijg.org/files/jpegsrc.v8d.tar.gz
tar xzf jpegsrc.v8d.tar.gz
cd jpeg-8d
./configure
make
cp ./.libs/libjpeg.8.dylib /usr/local/opt/jpeg/lib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ps: 如果编译之后找不到libjpeg.8.dylib这个文件, 可以用如下命令查找文件位置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -name libjpeg.8.dylib
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>python安装mysql驱动</title>
   <link href="http://wanghongjun2014.github.io/posts/python-mysql_connector.html"/>
   <updated>2017-08-05T00:00:00-07:00</updated>
   <id>/posts/python-mysql_connector</id>
   <content type="html">&lt;p&gt;安装python的mysql驱动的时候， 可以通过下面两种方式来安装
1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install mysql-connector-python --allow-external mysql-connector-python (pip install mysql-connector)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2 从mysql官网下载下来安装&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://dev.mysql.com/downloads/connector/c/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是不管哪种方式安装都碰到了一个error, 安装不成功, 错误信息类似于&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unable to find Protobuf include directory.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最开始怀疑是这个驱动包不支持python3, 后来用pyhton2试了一下还是不行(ps: 安装python3的驱动的时候将pip命令替换为pip3即可),
后来发现是版本的问题, 具体支持到哪个版本请自行查阅, 安装的时候带上版本号就可以了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; pip3 install mysql-connector==2.1.4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;目前版本是2.1.4, 再高的版本没有试过&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>php观察者模式</title>
   <link href="http://wanghongjun2014.github.io/posts/php-observe.html"/>
   <updated>2017-07-24T00:00:00-07:00</updated>
   <id>/posts/php-observe</id>
   <content type="html">&lt;p&gt;最近公司项目开发过程中有场景用到了观察者模式, 记录一下
一些面向对象的编程方式，提供了一种构建对象间复杂网络互连的能力。当对象们连接在一起时，
它们就可以相互提供服务和信息。这个模式对于大型系统项目来说应该是挺挺有用的，通俗的讲，
这种模式允许某个类去观察另一个类。当一个类被改变时，观察类就会收到通知并且做出相应的动作&lt;/p&gt;

&lt;p&gt;在平时的项目中还是挺有用的，比如一个用户下了一笔订单，下单成功后，就需要去发送短信/邮件的通知，库存的修改，账户余额的修改等等很多操作。&lt;/p&gt;

&lt;p&gt;在之后的PHP5.0起，内置的SPL标准库中就提供了这种设计模式接口供大家使用，接下了就通过实例来学习一下。&lt;/p&gt;

&lt;p&gt;SPL 提供了 SplSubject 和 SplObserver 接口。
SplSubject 接口提供了attach()、detach()、notify() 三个方法。而 SplObserver 接口则提供了 update()方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 * 这一模式的概念是SplSubject类维护了一个特定状态，当这个状态发生变化时，它就会调用notify()方法。
 * 调用notify()方法时，所有之前使用attach()方法注册的SplObserver实例的update方法都会被调用。
 *
 */
interface SplSubject{
    public function attach(SplObserver $observer);//注册观察者
    public function detach(SplObserver $observer);//释放观察者
    public function notify();//通知所有注册的观察者
}
interface SplObserver{
    public function update(SplSubject $subject);//观察者进行更新状态
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用所提供的接口，来实现观察者模式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
/**
 *具体目标
 */
class Salary implements SplSubject {
    private $observers, $money;
    public function __construct() {
        $this-&amp;gt;observers = array();
    }

    public function attach(SplObserver $observer) { //注册观察者
        $this-&amp;gt;observers[] = $observer;
    }

    public function detach(SplObserver $observer) { //释放观察者
        if($idx = array_search($observer,$this-&amp;gt;observers,true)) {
            unset($this-&amp;gt;observers[$idx]);
        }
    }

    public function notify() { //通知所有观察者
        foreach($this-&amp;gt;observers as $observer) {
            $observer-&amp;gt;update($this);
        }
    }

    public function payoff($money) { //发工资方法
        $this-&amp;gt;money = $money;
        $this-&amp;gt;notify(); //通知观察者
    }
}
/**
 * 具体观察者
 */
class Programmer1 implements SplObserver {
    public function update(SplSubject $subject) {
        echo 'Programmer1 发工资了！&amp;lt;br/&amp;gt;';
    }
}

class Programmer2 implements SplObserver {
    public function update(SplSubject $subject) {
        echo 'Programmer2 也发工资了！&amp;lt;br/&amp;gt;';
    }
}

$subject = new Salary();
$observer1 = new Programmer1();
$observer2 = new Programmer2();
//注册观察者
$subject-&amp;gt;attach($observer1);
$subject-&amp;gt;attach($observer2);
//发工资操作，发起通知
$subject-&amp;gt;payoff('20K');

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过Observer模式，把一对多对象之间的通知依赖关系的变得更为松散，大大地提高了程序的可维护性和可扩展性，也很好的符合了开放-封闭原则。东西是不错，如何能够更好的去使用它，仍需要多加实践、联系&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>php7中$GLOBALS['HTTP_RAW_POST_DATA']获取不到值</title>
   <link href="http://wanghongjun2014.github.io/posts/HTTP_RAW_POST_DATA.html"/>
   <updated>2017-07-24T00:00:00-07:00</updated>
   <id>/posts/HTTP_RAW_POST_DATA</id>
   <content type="html">&lt;p&gt;今天微信开发的时候碰到了一个问题, 接收不到微信推送过来的消息, 后来查明是因为php7中$GLOBALS[‘HTTP_RAW_POST_DATA’]被废弃了,
可以使用 file_get_contents( ‘php://input’ ) 来获取, 可以在代码中判断是否可以用 $GLOBALS[‘HTTP_RAW_POST_DATA’] 来获取值&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>图片上生成文字, 或者图片上生成图片</title>
   <link href="http://wanghongjun2014.github.io/posts/create-image.html"/>
   <updated>2017-07-12T00:00:00-07:00</updated>
   <id>/posts/create-image</id>
   <content type="html">&lt;p&gt;存在我很脑子里的很长时间的一个观念终于改变了, 以前总喜欢搞些看起来高大上的代码, 不爱写业务代码, 喜欢钻研新技术, 新的工具,
对老的技术嗤之以鼻, 对不喜欢的技术比如css, html等极度排斥, 现在觉的不管写什么, 其实都能锻炼你的某方面能力, 希望以后的自己
可以放平心态, 什么都可以做, 能写php, python, shell, 做的了dba, 码的了vue, 写的了业务代码, 搞得了服务器, 成为一个小的全栈工程师,
最近做的生成图片的功能比较多, 主要功能代码记录一下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php

// 字体28-21,  32-24
// 一行股票高度 141 , 两行股票高度 202
$stockNum = 5;

$mainTitleText = &quot;- 6月21日值得关注潜力股 -&quot;;
$font = '/usr/local/var/PingFang.ttc';
$circle = '/usr/local/var/circle.png';
$mainTitlePadding = padding($mainTitleText, 22.5);

// 股票文本
$text = array(
    '西的我的', '网络', '发发福', 'dfd'
);

$padding = array();

$circles = array(
    array('/usr/local/var/circle.png'),
    array('/usr/local/var/circle.png', '/usr/local/var/circle.png'),
    array('/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png'),
    array('/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png' , '/usr/local/var/circle.png'),
    array('/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png'),
    array('/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png', '/usr/local/var/circle.png'),
);

$count = count($text);
$fontSize = 25;
$backgroundHeight = ($count &amp;gt; 3) ? 204 : 148;
$im = imagecreatetruecolor(750, $backgroundHeight);

// 定义各种颜色
$white = imagecolorallocate($im, 255, 255, 255);
$red = imagecolorallocate($im, 223, 84, 82);
$black = imagecolorallocate($im, 0, 0, 0);
$yellow = imagecolorallocate($im, 240, 140, 51);
$blue = imagecolorallocate($im, 106, 142, 208);

$colors = array(
    array($red),
    array($red, $yellow),
    array($red, $yellow, $blue),
    array($red, $yellow, $blue, $red),
    array($red, $yellow, $yellow, $blue, $red),
    array($blue, $red, $yellow, $yellow, $blue, $red),
);
// 创建底层画布
imagefilledrectangle($im, 0, 0, 750, $backgroundHeight, $white);


// 总共分为两排, 第一排的数量 ($count - 3) 个, 第二个 3个
if ($count - 3 &amp;gt; 0) {
    // 主标题
    imagettftext($im, 22.5, 0, (750 - $mainTitlePadding['width']) / 2, 52, $black, $font, $mainTitleText);

    // 获得字体的宽度和高度
    foreach ($text as $key =&amp;gt; $value) {
        $padding[] = padding($value, $fontSize);
    }

    $circle = $circles[$count - 1];
    $color = $colors[$count - 1];

    $before3Stocks = array_slice($text, 0, $count - 3, true);
    $next3Stocks = array_slice($text, $count -3, 3, true);

    $multi30 = count($before3Stocks) - 1 &amp;gt; 0 ? count($before3Stocks) - 1 : 0;
    $j = 0;
    foreach ($before3Stocks as $before =&amp;gt; $beforeStockName) {
        $oneCircle = file_get_contents($circle[$before]);
        $oneCircle = imagecreatefromstring($oneCircle);
        imagecopyresized($im, $oneCircle, (750 - 196 * count($before3Stocks) - 30*$multi30) / 2 + 30 * $j + 196 * $j, 79,0,0,196, 48,imagesx($oneCircle),imagesy($oneCircle));
        imagettftext($im, 26, 0, (750 - 196 * count($before3Stocks) - 30 * $multi30) / 2 + 196*$j + 30*$j + (196 - $padding[$before]['width']) / 2, 115, $color[$before], $font, $before3Stocks[$before]);
        $j = $j + 1;
    }

    $oneCircle = ''; // 重新初始化

    // 第二排
    $i = 0;
    foreach ($next3Stocks as $k =&amp;gt; $stockName) {
        $oneCircle = file_get_contents($circle[$k]);
        $oneCircle = imagecreatefromstring($oneCircle);
        imagecopyresized($im, $oneCircle, (750 - 196 * 3 - 30 *2) / 2 + 30 * $i + 196 * $i, 136,0,0,196, 48,imagesx($oneCircle),imagesy($oneCircle));
        imagettftext($im, $fontSize, 0, (750 - 196 * 3 - 30*2) / 2 + 196 * $i + 30 * $i + (196 - $padding[$k]['width']) / 2, 76 + (48 - $padding[$k]['height']) / 2 + 30 + 60, $color[$k], $font, $stockName);
        $i = $i + 1;
    }

} else {
    // 主标题
    imagettftext($im, 22.5, 0, (750 - $mainTitlePadding['width']) / 2, 52, $black, $font, $mainTitleText);

    // 获得字体的宽度和高度
    foreach ($text as $key =&amp;gt; $value) {
        $padding[] = padding($value, $fontSize);
    }

    $circle = $circles[$count - 1];
    $color = $colors[$count - 1];
    $multi30 = count($text) - 1 &amp;gt; 0 ? count($text) - 1 : 0;
    $j = 0;
    foreach ($text as $k2 =&amp;gt; $stockName) {
        $oneCircle = file_get_contents($circle[$k2]);
        $oneCircle = imagecreatefromstring($oneCircle);
         imagecopyresized($im, $oneCircle, (750 - 196 * count($text) - 30*$multi30) / 2 + 30 * $j + 196 * $j, 79,0,0,196, 48,imagesx($oneCircle),imagesy($oneCircle));
         imagettftext($im, 26, 0, (750 - 196 * count($text) - 30 * $multi30) / 2 + 196*$j + 30*$j + (196 - $padding[$k2]['width']) / 2, 115, $color[$k2], $font, $stockName);
        $j = $j + 1;
    }
}


header(&quot;Content-type: image/png&quot;);
imagepng($im);
imagedestroy($im);


// 返回文案的高度和宽度
function padding($text, $size)
{
    $font = $font = '/usr/local/var/PingFang.ttc';
    $largeText  = imagettfbbox($size, 0, $font, $text);
    $width = $largeText[2] - $largeText[6]; // 文字宽度
    $height = $largeText[3] - $largeText[7];
    return array(
        'width' =&amp;gt; $width,
        'height' =&amp;gt; $height
    );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结果如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/create_image.png&quot; alt=&quot;result&quot; title=&quot;结果&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>mysql正常运行偶尔会自动停止</title>
   <link href="http://wanghongjun2014.github.io/posts/mysql-error-log.html"/>
   <updated>2017-07-05T00:00:00-07:00</updated>
   <id>/posts/mysql-error-log</id>
   <content type="html">&lt;p&gt;一个外包项目的mysql数据库服务今晚上突然自己停止了, 回来查看mysqld进程确实没了, 然后查看mysql的error_log， 发现错误如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mysql-error.png&quot; alt=&quot;result&quot; title=&quot;结果&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个是因为mysql升级软件包之后, 一些表的结构发生变化导致的, 可以运行如下命令解决:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mysql_upgrade -u root -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果如下:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mysql-error-ok.png&quot; alt=&quot;result&quot; title=&quot;结果&quot; /&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>python中用type来创建一个类</title>
   <link href="http://wanghongjun2014.github.io/posts/python-type.html"/>
   <updated>2017-06-01T00:00:00-07:00</updated>
   <id>/posts/python-type</id>
   <content type="html">&lt;p&gt;起因是和同事讨论Python中的枚举类型的作用与php中有什么不同,后来发现python2.7中本身不带枚举类的,需要自己写代码实现,
3中已经自带枚举类的包了, 用type函数实现,一般我们用type来判断对象的类型(我更倾向用isinstance来判断), 但是type比较
少用的作用是用来创建一个类&lt;/p&gt;

&lt;h3 id=&quot;代码如下&quot;&gt;代码如下&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;def __init__(self, name):
    self.name = name


def print_name(self):
    print(self.name)


bases = (object,)

attrs = {
    '__init__' : __init__,
    'print_name' : print_name
}

Duck = type('Duck', bases, attrs)

d = Duck('cola')
d.print_name()

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中type函数包括三个参数, 第一个是类的名字, 第二个可以理解成继承的类,但要是元组格式, 第三个参数是个dict类型, 里面可以包含类的成员变量
,也可以包含类的成员函数—-其实当你用class定义一个类的时候, python解释器在遇到class的时候只会浏览检测一下class的语法之类的东西, 然后接着会用
内置的type函数来创建类.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>常用的各种linux系统安装nodejs</title>
   <link href="http://wanghongjun2014.github.io/posts/nodejs.html"/>
   <updated>2017-05-05T00:00:00-07:00</updated>
   <id>/posts/nodejs</id>
   <content type="html">&lt;p&gt;有的时候node源码下载编译安装的时候会有各种依赖包的版本问题, 所以采用命令方式安装比较简单, 如下:&lt;/p&gt;

&lt;h3 id=&quot;debian78-和-ubuntu121416&quot;&gt;Debian7/8 和 Ubuntu12/14/16&lt;/h3&gt;
&lt;p&gt;nodejs&amp;gt;=6.x&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodejsv7:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -
sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;centos-or-fedora&quot;&gt;Centos Or Fedora&lt;/h3&gt;
&lt;p&gt;nodejs &amp;gt;= 6.x&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --silent --location https://rpm.nodesource.com/setup_6.x | bash -
yum -y install nodejs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodejs v7&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl --silent --location https://rpm.nodesource.com/setup_7.x | bash -
yum -y install nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然还有些0.10低版本之类的node就不考虑的, out了&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>杨辉三角</title>
   <link href="http://wanghongjun2014.github.io/posts/yanghui-sanjiao.html"/>
   <updated>2017-04-26T00:00:00-07:00</updated>
   <id>/posts/yanghui-sanjiao</id>
   <content type="html">&lt;p&gt;算法代码为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/python3
# _*_ coding: utf-8 _*_

def triangle(max):
    q = [1]
    n = 0
    while n &amp;lt; max:
        print(q)
        for i in range(1, len(q)):
            q[i] = p[i-1] + p[i]

        q.append(1)
        n = n + 1
        p = q[:]



triangle(6)

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果为:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/yanghui-sanjiao.png&quot; alt=&quot;result&quot; title=&quot;结果&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>汉诺塔算法</title>
   <link href="http://wanghongjun2014.github.io/posts/hannuota-suanfa.html"/>
   <updated>2017-04-23T00:00:00-07:00</updated>
   <id>/posts/hannuota-suanfa</id>
   <content type="html">&lt;p&gt;下午研究下汉诺塔算法, 挺有意思的, 大体示意图如下:
&lt;img src=&quot;/assets/hannuota.png&quot; alt=&quot;hannuota&quot; title=&quot;汉诺塔&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说明:A.B.C分别表示三根柱子, 1，2，3分别表示三个圆盘, 并且数字越大表示圆盘越大, 现在我们需要将A上的全部圆盘移动到C上&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;只有一个圆盘1的情况, 直接从&lt;strong&gt;A-&amp;gt;C&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;有2个圆盘1 2, 则 A-&amp;gt;B  &lt;strong&gt;A-&amp;gt;C&lt;/strong&gt; B-&amp;gt;C&lt;/li&gt;
  &lt;li&gt;有3个圆盘1 2 3的情况下, 总共需要7步。 A-&amp;gt;C A-&amp;gt;B C-&amp;gt;B &lt;strong&gt;A-&amp;gt;C&lt;/strong&gt; B-&amp;gt;A B-&amp;gt;C A-&amp;gt;C&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;分析过程, 不管有几个盘子, 最重要的就是&lt;strong&gt;A-&amp;gt;C&lt;/strong&gt;(步骤中加粗)这一步, 也就是把数字最大的盘子移动到C柱子上, 以3个盘子为例, 在A-&amp;gt;C步骤的上面表示把1号和2号盘子
从起点A移动到终点B, 下面表示把1号盘子和2号盘子从起点B移动到终点C, 所以可以用一种递归的思想表示这个过程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;假如函数原型是move(n, A, B, C)
#上面的部分: n-1个圆盘从A-&amp;gt;B
move(n-1, A, C, B)
#中间部分, 号码最大的盘子从A-&amp;gt;C
move(1, A, B, C)
#下面部分: n-1个圆盘从B-&amp;gt;C
move(n-1, B, A, C)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;算法代码为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/local/bin/python3
# _*_ coding: utf-8 _*_

def move(n, a, b, c):
    if n == 1:
        print(a, '-&amp;gt;', c)
    else:
        move(n-1, a, c, b)
        move(1, a, b, c)
        move(n-1, b, a, c)

count = input(&quot;请输入要移动到圆盘个数: &quot;)
move(int(count), 'A', 'B', 'C')
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;效果为:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hannuota-result.png&quot; alt=&quot;result&quot; title=&quot;结果&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>acsii-unicode-utf8编码的来源以及关系</title>
   <link href="http://wanghongjun2014.github.io/posts/unicode-utf8.html"/>
   <updated>2017-04-22T00:00:00-07:00</updated>
   <id>/posts/unicode-utf8</id>
   <content type="html">&lt;p&gt;周末的时候细下心来查询整理下了一下字符串编码的来源以及各种格式之间的关系,以下纯属自己的理解思路,如有误,欢迎指出:&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
  &lt;li&gt;关于ascii码
    &lt;pre&gt;&lt;code&gt;最早的时候计算机是由老外发明的, 他们只把127个字符编码到计算机中, 其中包括大小写字母和一些特殊符号, 这个
编码表被称为ASCII编码,比如大写字母A的编码是65,小写字母z的编码是122, 所以针对ascii编码而言, 1个字节(8
个byte)足以了, 因为1个字节最大二进制表示为 11111111, 十进制位256
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;关于中文编码
    &lt;pre&gt;&lt;code&gt;第一条说的英文, 对于中文而言, 1个字节明显不够, 刚刚百度查了下, 中国的汉字大约有10W多个, 至少2个字节吧,
2个字节最大为 1111111111111111十进制数位 65535 ,所以中国就出现了GBK系列的编码, 但是如果每个国家都制定自己的一套编码那岂不是乱套了吗, 所以为了统一unicode编码就出现了
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;unicode编码
    &lt;pre&gt;&lt;code&gt;unicode把所有的编码都统一到一套编码里, 它的标准也在不停的扩展, 最常用的是用两个字节表示一个字符(这个地
方的字符是不区分英文还是中文的), 所以到目前为止, ascii码和unicode编码的区别就是前者采用一个字节编码(其实连一个字节都用不上,总共127个字符, 7个byte正好就够了), 后者用两个字节但是如果你写的文本全是英文的话,
采取unicode编码是不是就有点浪费空间了呢, 对于存储和传输都是十分不利的, 比如字母A在ascii编码中存储的二
进制为01000001, 但是在unicode编码中为 00000000 01000001, 为了解决这种情况, 就出现了一种变长的unicode编码, 被称为 utf-8 编码
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;utf-8编码
    &lt;pre&gt;&lt;code&gt;utf-8规定, 把一个unicode字符编码成1-6个字节, 常用的英文被编码成1个字节(unicode是2个字节), 中文一般
用3个字节(unicode也是2个字节), 只有那些很生僻的汉字才会用到4-6个字节
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;字符&lt;/td&gt;
      &lt;td&gt;ASCII码&lt;/td&gt;
      &lt;td&gt;unicode编码&lt;/td&gt;
      &lt;td&gt;utf-8编码&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;–01000001–&lt;/td&gt;
      &lt;td&gt;–00000000 01000001–&lt;/td&gt;
      &lt;td&gt;–01000001–&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;中&lt;/td&gt;
      &lt;td&gt;–x–&lt;/td&gt;
      &lt;td&gt;–01001110 00101101–&lt;/td&gt;
      &lt;td&gt;–11100100 10111000 10101101–&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;另外, 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件
&lt;/code&gt;&lt;/pre&gt;

</content>
 </entry>
 
 <entry>
   <title>php和java中对aes加密方式的不同</title>
   <link href="http://wanghongjun2014.github.io/posts/php-java-aes.html"/>
   <updated>2017-04-21T00:00:00-07:00</updated>
   <id>/posts/php-java-aes</id>
   <content type="html">&lt;p&gt;周末的时候写了一个联通代扣取话费需求的接口,由于文档中只给出了java aes加密的示例, 加密方式为PKCS5, 但是这种方
式php中是不支持的(我用java的入参调试了n久, 结果都是错的, 坑了很长时间, 翻阅很多文档终于找到了方案), php的解决方案如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; //加密函数
 function encrypt($plaintext, $key) {
     $plaintext = pkcs5_pad($plaintext, 16);
     return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, hex2bin($key), $plaintext, MCRYPT_MODE_ECB));
 }
 
 //解密函数
 function decrypt($encrypted, $key) {
     $decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, hex2bin($key), hex2bin($encrypted), MCRYPT_MODE_ECB);
     $padSize = ord(substr($decrypted, -1));
     return substr($decrypted, 0, $padSize*-1);
 }
 
 //pad偏移函数
 function pkcs5_pad ($text, $blocksize)
 {
     $pad = $blocksize - (strlen($text) % $blocksize);
     return $text . str_repeat(chr($pad), $pad);
 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参考文档: &lt;a href=&quot;http://stackoverflow.com/questions/17835726/aes-encryption-using-java-and-php&quot; title=&quot;aes&quot;&gt;http://stackoverflow.com/questions/17835726/aes-encryption-using-java-and-php&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 
 
</feed>